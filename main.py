import datetime as dt


class Record:
    """
    1. Необходимы докстринги
    """
    def __init__(self, amount, comment, date=''):
        self.amount = amount
        # 2. Необходимо корректно оформлять перенос строк.
        # Смотреть, на открывающие и закрывающие скобки.
        # Код должен в первую очередь хорошо читаться, быть понятным.
        # И вместо пустой строки по умолчанию лучше использовать None.
        self.date = (
            dt.datetime.now().date()
            if not date
            else dt.datetime.strptime(date, '%d.%m.%Y').date()
        )
        self.comment = comment


class Calculator:
    """
    3. Докстринг
    """
    def __init__(self, limit):
        self.limit = limit
        self.records = []

    def add_record(self, record):
        """
        4. Необходим докстринг.
        Также необходимо прописать входные и выходные данные.
        :param record:
        :return:
        """
        self.records.append(record)

    def get_today_stats(self):
        """
        5. Также нужен докстринг.
        Также необходимо прописать входные и выходные данные.
        :param record:
        :return:
        """
        today_stats = 0
        # 6. Принято записывать переменные с маленькой буквы: record
        for Record in self.records:
            # 7. Чтобы не получать постоянно текущую дату,
            # ее можно вынести в отдельную переменную.
            if Record.date == dt.datetime.now().date():
                today_stats = today_stats + Record.amount
        # 8. Кстати, return лучше отделять пустой строкой от другого кода.
        # Если, конечно, это не единственная строка в методе.
        return today_stats

    def get_week_stats(self):
        """
        9. Написание докстрингов может показаться утомительным занятием.
        Но они реально облегчают работу с кодом впоследствии.
        Ведь тут можно оставить массу подсказок не только для других
        разработчиков, но и для самого себя в будущем.
        Также необходимо прописать входные и выходные данные.
        :param record:
        :return:
        """
        week_stats = 0
        # 10. Круто, что в данном случае вынес дату в отдельную переменную.
        today = dt.datetime.now().date()
        # 11. А тут с именованием переменных все хорошо. Молодец!
        for record in self.records:
            # 12. Если разницу в датах вынести в отдельную переменную здесь,
            # то следующее условие будет выглядеть куда проще и короче.
            # Кстати, есть еще у datetime удобная штука: timedelta()
            if (
                (today - record.date).days < 7 and
                (today - record.date).days >= 0
            ):
                # 13. Классно, что используешь сокращенную запись.
                week_stats += record.amount
        # 14. И вновь красота return отделенного пустой строкой...
        return week_stats


class CaloriesCalculator(Calculator):
    """
    14. Опять докстринг
    """
    def get_calories_remained(self):  # Получает остаток калорий на сегодня
        """
        15. Хорошо, что начинаешь использовать комментарии для описания метода.
        Но было бы гораздо круче, если бы описание шло в докстрингах.
        :return:
        """
        # 16. Все хорошо, но не очень понятно... что такое "икс"?.
        # Лучше давать понятные имена переменных.
        x = self.limit - self.get_today_stats()
        # 17. Иметь несколько точек выхода (return) далеко не всегда хорошо.
        # Лучше объявить еще одну перменную для сообщения и,
        # соответственно, присваивать ей текстовые значения.
        # А return будет один отдавать эту переменную.
        # Еще, кстати, от бэкслеша надо избавиться.
        if x > 0:
            return f'Сегодня можно съесть что-нибудь' \
                   f' ещё, но с общей калорийностью не более {x} кКал'
        else:
            # 18. Тут скобки не нужны, а вот пробела нехватает.
            # В предыдущем сообщении, кстати, точка вроде потерялась после кКал.
            return('Хватит есть!')


class CashCalculator(Calculator):
    """
    19. Это только на первый взгляд может показаться, что докстринги
    слишком сильно и необоснованно раздувают код. Потом с ними будет проще)
    """
    USD_RATE = float(60)  # Курс доллар США.
    EURO_RATE = float(70)  # Курс Евро.

    # 20. Ты уже объявил константы в классе и их можно не передавать в метод.
    # К ним можно обращаться через self.USD_RATE и self.EURO_RATE
    def get_today_cash_remained(self, currency,
                                USD_RATE=USD_RATE, EURO_RATE=EURO_RATE):
        """
        21. С докстрингом было бы понятнее, что делает этот метод.
        :param currency:
        :param USD_RATE:
        :param EURO_RATE:
        :return:
        """
        currency_type = currency
        cash_remained = self.limit - self.get_today_stats()
        if currency == 'usd':
            cash_remained /= USD_RATE
            currency_type = 'USD'
        elif currency_type == 'eur':
            cash_remained /= EURO_RATE
            currency_type = 'Euro'
        elif currency_type == 'rub':
            cash_remained == 1.00
            currency_type = 'руб'
        # 22. Как хорошо, что у нас только три типа валюты, а не 333.
        # Но если было бы 333, то можно было бы использовать словарь.
        # Где ключом была бы валюта, а значением - ее имя. Тогда бы к ней
        # можно было обращаться как-то так currencies[currency].
        if cash_remained > 0:
            return (
                f'На сегодня осталось {round(cash_remained, 2)} '
                f'{currency_type}'
            )
        elif cash_remained == 0:
            return 'Денег нет, держись'
        elif cash_remained < 0:
            # 23. И снова у нас несколько точек выхода.
            # Лучше использовать одну. Да, и elif лучше заменить на else.
            # Кстати, выше ты уже использовал f-строку.
            # Тут бы она тоже смотрелась вполне современно. Ну,
            # и про бэкслеши не стоит забывать. Точнее, наоборот,
            # стоит о них забыть и избавиться.
            return 'Денег нет, держись:' \
                   ' твой долг - {0:.2f} {1}'.format(-cash_remained,
                                                     currency_type)

    # 24. Если мы не переопределяем поведение метода, то вспоминать
    # о нем лишний раз и не нужно. Следующие строчки можно убрать.
    def get_week_stats(self):
        super().get_week_stats()


# Резюме: Получилось очень даже неплохо. Но есть моменты, на которые
# стоит обратить внимание. Некоторые стоит все же поправить.
# Еще было бы круто, если у классов появится метод __str__, который
# позволит сделать все еще нагляднее и приятнее.
